package org.sasanlabs.service.vulnerability.commandInjection.fileUpload;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.sasanlabs.internal.utility.FileReader;
import org.sasanlabs.internal.utility.FrameworkConstants;
import org.sasanlabs.service.vulnerability.fileupload.PreflightController;
import org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.sasanlabs.service.vulnerability.fileupload.UnrestrictedFileUpload.CONTENT_DISPOSITION_STATIC_FILE_LOCATION;

public class PreflightControllerTest {

    @Mock
    UnrestrictedFileUpload unrestrictedFileUpload;
    @Mock
    FileReader fileReader;
    String fileName = "test.txt";
    private PreflightController preflightController;
    private Path contentDispositionRoot;

    private Path textFilePath = Paths.get(fileName);


    @BeforeEach
    void setUp() throws IOException {
        MockitoAnnotations.initMocks(this);
        Files.createFile(textFilePath);
    }

    @AfterEach
    void destroy() throws IOException {
        Files.delete(textFilePath);
    }


    @Test
    void shouldBeAbleToFetchFile() throws IOException {

        //Arrange
        preflightController = new PreflightController(fileReader);
        contentDispositionRoot =
                Paths.get(
                        FrameworkConstants.SLASH
                                + CONTENT_DISPOSITION_STATIC_FILE_LOCATION
                                + FrameworkConstants.SLASH);

        when(unrestrictedFileUpload.getContentDispositionRoot()).thenReturn(contentDispositionRoot);
        when(fileReader.readAsStream(fileName)).thenReturn(new ByteArrayInputStream("test".getBytes()));

        //Act
        ResponseEntity<byte[]> responseEntity = preflightController.fetchFile(fileName);

        //Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        verify(fileReader).readAsStream(fileName);
    }

    @Test
    void shouldThrowException() throws IOException, URISyntaxException {

        //Arrange
        FileReader fileReader1 = new FileReader(new UnrestrictedFileUpload());
        preflightController = new PreflightController(fileReader1);
        String anotherFileName = "test";

        //Act and Assert
        assertThrows(IOException.class, () -> preflightController.fetchFile(anotherFileName));
    }

}

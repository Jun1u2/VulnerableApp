package org.sasanlabs.service.vulnerability.fileupload;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.net.URISyntaxException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

public class UnrestrictedFileUploadTest {
    private UnrestrictedFileUpload unrestrictedFileUpload;

    @BeforeEach
    void setUp() throws IOException, URISyntaxException {
        unrestrictedFileUpload = new UnrestrictedFileUpload();
    }

    @Test
    void unrestrictedFileSizeUploadLevel10_OverLimitFileSize_FileContentSavedInMemory()
            throws Exception {
        final byte[] fileContent = "Test file content".getBytes();

        MultipartFile multiplartFile = Mockito.mock(MultipartFile.class);
        when(multiplartFile.getBytes()).thenReturn(fileContent);

        ResponseEntity<GenericVulnerabilityResponseBean<String>> result =
                unrestrictedFileUpload.getVulnerablePayloadLevel10(multiplartFile);

        assertEquals(HttpStatus.OK, result.getStatusCode());

        assertEquals(
                1,
                unrestrictedFileUpload.getStoredFiles().size(),
                "Uploaded file with unrestricted size is not found.");
        assertEquals(
                fileContent,
                unrestrictedFileUpload.getStoredFiles().get(0),
                "The content of uploaded file with unrestricted size is unexpected.");
    }
}
